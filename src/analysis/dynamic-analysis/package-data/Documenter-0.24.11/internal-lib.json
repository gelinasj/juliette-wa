{
  "eval_info": {
    "call_count": 28,
    "stack_traces": [
      {
        "count": 2,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at src.jl:2",
          "include(::Function, ::Module, ::String) at Base.jl:380"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 2
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:4",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at doctestapi.jl:72",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at doctestapi.jl:83",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr) at Docs.jl:221",
          "top-level scope at doctestapi.jl:53"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at FooBroken.jl:3",
          "include(::Function, ::Module, ::String) at Base.jl:380"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr) at Docs.jl:221",
          "top-level scope at doctestapi.jl:131"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:94",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr) at Docs.jl:221",
          "top-level scope at doctestapi.jl:148"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr) at Docs.jl:221",
          "top-level scope at doctestapi.jl:45"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at FooWorking.jl:3",
          "include(::Function, ::Module, ::String) at Base.jl:380"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr) at Docs.jl:221",
          "top-level scope at doctestapi.jl:61"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at NoMeta.jl:3",
          "include(::Function, ::Module, ::String) at Base.jl:380"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at e.jl:5",
          "include(::Function, ::Module, ::String) at Base.jl:380"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at doctestapi.jl:64",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at doctestapi.jl:97",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at TestUtilities.jl:67",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:65",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:80",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at a.jl:2",
          "include(::Function, ::Module, ::String) at Base.jl:380"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at utilities.jl:24",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr) at Docs.jl:221",
          "top-level scope at doctestapi.jl:139"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at doctestapi.jl:151",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:3",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:51",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "initmeta(::Module) at Docs.jl:79",
          "doc!(::Module, ::Base.Docs.Binding, ::Base.Docs.DocStr, ::Any) at Docs.jl:221",
          "top-level scope at make.jl:26",
          "include(::String) at client.jl:457"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "const [fun (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "@static(::LineNumberNode, ::Module, ::Any) at osutils.jl:19",
          "include(::String) at client.jl:457",
          "top-level scope at runtests.jl:25",
          "top-level scope at Test.jl:1115"
        ],
        "auxillary": {
          "ast_heads": [
            {
              "call [fun (gen)]": 1
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "ast_heads": [],
      "func_def_types": {
        "newFuncCount": 0,
        "bodylessFuncCount": 0,
        "funcRedefCount": 0,
        "miscCount": 0
      },
      "func_def_ast_forms": "[[{\"astHead\":\"call\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},2],[{\"astHead\":\"const\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},54]]"
    }
  },
  "invokelatest_info": {
    "call_count": 27,
    "stack_traces": [
      {
        "count": 8,
        "last_call": [
          "show_backtrace(::Base.PipeEndpoint, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "record(::Test.DefaultTestSet, ::Union{Test.Error, Test.Fail}) at Test.jl:775",
          "do_test(::Test.ExecutionResult, ::Any) at Test.jl:520",
          "macro expansion at Documenter.jl:744 [inlined]"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 8
            }
          ]
        }
      },
      {
        "count": 8,
        "last_call": [
          "show_backtrace(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "showerror(::IOContext{Base.GenericIOBuffer{Array{UInt8,1}}}, ::ErrorException, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}; backtrace::Bool) at errorshow.jl:93",
          "showerror at errorshow.jl:88 [inlined]",
          "showvalue at ConsoleLogger.jl:49 [inlined]"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 8
            }
          ]
        }
      },
      {
        "count": 6,
        "last_call": [
          "show_backtrace(::Base.GenericIOBuffer{Array{UInt8,1}}, ::Array{Any,1}) at errorshow.jl:670",
          "showerror(::Base.GenericIOBuffer{Array{UInt8,1}}, ::DivideError, ::Array{Any,1}; backtrace::Bool) at errorshow.jl:93",
          "showerror(::Base.GenericIOBuffer{Array{UInt8,1}}, ::DivideError, ::Array{Any,1}) at errorshow.jl:88",
          "invokelatest(::Any, ::Any, ::Vararg{Any,N} where N; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at function-override.jl:156"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 6
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "show_backtrace(::Base.GenericIOBuffer{Array{UInt8,1}}, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "showerror(::Base.GenericIOBuffer{Array{UInt8,1}}, ::ErrorException, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}; backtrace::Bool) at errorshow.jl:93",
          "(::Base.var\"#showerror##kw\")(::NamedTuple{(:backtrace,),Tuple{Bool}}, ::typeof(showerror), ::Base.GenericIOBuffer{Array{UInt8,1}}, ::ErrorException, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:88",
          "showerror(::Base.GenericIOBuffer{Array{UInt8,1}}, ::LoadError, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}; backtrace::Bool) at errorshow.jl:99"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "show_backtrace(::IOStream, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "record(::Test.DefaultTestSet, ::Union{Test.Error, Test.Fail}) at Test.jl:775",
          "do_test(::Test.ExecutionResult, ::Any) at Test.jl:520",
          "(::Main.DocTestsTests.var\"#21#40\")(::ErrorException, ::Bool, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}, ::SubString{String}) at doctests.jl:206"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "show_backtrace(::IOStream, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "record(::Test.DefaultTestSet, ::Union{Test.Error, Test.Fail}) at Test.jl:775",
          "do_test(::Test.ExecutionResult, ::Any) at Test.jl:520",
          "(::Main.DocTestAPITests.var\"#15#28\")(::TestSetException, ::Bool, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}, ::SubString{String}) at doctestapi.jl:214"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "show_backtrace(::IOStream, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "record(::Test.DefaultTestSet, ::Union{Test.Error, Test.Fail}) at Test.jl:775",
          "do_test(::Test.ExecutionResult, ::Any) at Test.jl:520",
          "(::Main.DocTestsTests.var\"#23#42\")(::Nothing, ::Bool, ::Array{Ptr{Nothing},1}, ::SubString{String}) at doctests.jl:220"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": [
          "show_backtrace(::IOStream, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
          "record(::Test.DefaultTestSet, ::Union{Test.Error, Test.Fail}) at Test.jl:775",
          "do_test(::Test.ExecutionResult, ::Any) at Test.jl:520",
          "(::Main.DocTestAPITests.var\"#15#28\")(::TestSetException, ::Bool, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}, ::SubString{String}) at doctestapi.jl:213"
        ],
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 1
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "function_names": [
        {
          "function_name": "identity",
          "count": 27
        }
      ]
    }
  }
}
