{
  "eval_info": {
    "call_count": 3636,
    "stack_traces": [
      {
        "count": 565,
        "last_call": "docsxref(::Markdown.Link, ::String, ::Dict{Symbol,Any}, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at CrossReferences.jl:143",
        "auxillary": {
          "ast_heads": [
            {
              "curly [top (gen)]": 565
            }
          ]
        }
      },
      {
        "count": 471,
        "last_call": "#7 at DocTests.jl:220 [inlined]",
        "auxillary": {
          "ast_heads": [
            {
              "call [top]": 312
            },
            {
              "useimport [top (gen)]": 3
            },
            {
              "error [top (gen)]": 3
            },
            {
              "= [top]": 32
            },
            {
              "nothing [top (gen)]": 12
            },
            {
              "for [top]": 4
            },
            {
              "other [top (gen)]": 20
            },
            {
              "variable [top (gen)]": 21
            },
            {
              "let [top]": 12
            },
            {
              "macrocall [top]": 8
            },
            {
              "struct [top]": 6
            },
            {
              "function [top]": 28
            },
            {
              "include [top]": 2
            },
            {
              "|> [top]": 2
            },
            {
              "other [top]": 414
            },
            {
              "value [top (gen)]": 2
            }
          ]
        }
      },
      {
        "count": 317,
        "last_call": "get_new_sandbox(::Symbol) at Expanders.jl:722",
        "auxillary": {
          "ast_heads": [
            {
              "function [top (gen)]": 317
            }
          ]
        }
      },
      {
        "count": 317,
        "last_call": "get_new_sandbox(::Symbol) at Expanders.jl:724",
        "auxillary": {
          "ast_heads": [
            {
              "function [top (gen)]": 317
            }
          ]
        }
      },
      {
        "count": 280,
        "last_call": "runner(::Type{Documenter.Expanders.AutoDocsBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:413",
        "auxillary": {
          "ast_heads": [
            {
              "variable [top (gen)]": 280
            }
          ]
        }
      },
      {
        "count": 279,
        "last_call": "#21 at Expanders.jl:617 [inlined]",
        "auxillary": {
          "ast_heads": [
            {
              "call [top]": 164
            },
            {
              "useimport [top (gen)]": 5
            },
            {
              "= [top]": 42
            },
            {
              "other [top (gen)]": 4
            },
            {
              "variable [top (gen)]": 8
            },
            {
              "macrocall [top]": 16
            },
            {
              "struct [top]": 8
            },
            {
              "function [top]": 8
            },
            {
              "include [top]": 8
            },
            {
              "other [top]": 262
            },
            {
              "variable [top]": 16
            }
          ]
        }
      },
      {
        "count": 267,
        "last_call": "runner(::Type{Documenter.Expanders.ExampleBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:558",
        "auxillary": {
          "ast_heads": [
            {
              "other [top (gen)]": 267
            }
          ]
        }
      },
      {
        "count": 267,
        "last_call": "#15 at Expanders.jl:555 [inlined]",
        "auxillary": {
          "ast_heads": [
            {
              "call [top]": 4
            },
            {
              "useimport [top (gen)]": 30
            },
            {
              "call [top (gen)]": 80
            },
            {
              "function [top (gen)]": 12
            },
            {
              "other [top (gen)]": 20
            },
            {
              "struct [top (gen)]": 8
            },
            {
              "variable [top (gen)]": 8
            },
            {
              "= [top (gen)]": 68
            },
            {
              "for [top (gen)]": 4
            },
            {
              "value [top (gen)]": 1
            },
            {
              "macrocall [top (gen)]": 32
            }
          ]
        }
      },
      {
        "count": 266,
        "last_call": "eval_repl(::Documenter.DocTests.MutableMD2CodeBlock, ::Module, ::Dict{Symbol,Any}, ::Documenter.Documents.Document, ::String) at DocTests.jl:222",
        "auxillary": {
          "ast_heads": [
            {
              "other [top (gen)]": 266
            }
          ]
        }
      },
      {
        "count": 148,
        "last_call": "runner(::Type{Documenter.Expanders.REPLBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:620",
        "auxillary": {
          "ast_heads": [
            {
              "other [top (gen)]": 148
            }
          ]
        }
      },
      {
        "count": 97,
        "last_call": "runner(::Type{Documenter.Expanders.AutoDocsBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:380",
        "auxillary": {
          "ast_heads": [
            {
              "other [top (gen)]": 89
            },
            {
              "value [top (gen)]": 8
            }
          ]
        }
      },
      {
        "count": 64,
        "last_call": "runner(::Type{Documenter.Expanders.DocsBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:307",
        "auxillary": {
          "ast_heads": [
            {
              "curly [top (gen)]": 64
            }
          ]
        }
      },
      {
        "count": 61,
        "last_call": "runner(::Type{Documenter.Expanders.MetaBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:256",
        "auxillary": {
          "ast_heads": [
            {
              "function [top]": 1
            },
            {
              "other [top (gen)]": 21
            },
            {
              "call [top]": 4
            },
            {
              "variable [top (gen)]": 19
            },
            {
              "value [top (gen)]": 4
            },
            {
              "macrocall [top (gen)]": 4
            },
            {
              "= [top]": 12
            },
            {
              "module [top]": 4
            },
            {
              "useimport [top]": 16
            }
          ]
        }
      },
      {
        "count": 56,
        "last_call": "doctest(::Documenter.DocTests.DocTestContext, ::Documenter.Utilities.Markdown2.CodeBlock) at DocTests.jl:160",
        "auxillary": {
          "ast_heads": [
            {
              "function [top (gen)]": 2
            },
            {
              "= [top (gen)]": 7
            },
            {
              "other [top (gen)]": 35
            },
            {
              "useimport [top (gen)]": 3
            },
            {
              "nothing [top (gen)]": 9
            }
          ]
        }
      },
      {
        "count": 50,
        "last_call": "(::Documenter.Documents.var\"#13#14\"{Module,Dict{Symbol,Any},Expr})() at Documents.jl:477",
        "auxillary": {
          "ast_heads": [
            {
              "other [top (gen)]": 37
            },
            {
              "value [top (gen)]": 13
            }
          ]
        }
      },
      {
        "count": 32,
        "last_call": "#9 at DocTests.jl:247 [inlined]",
        "auxillary": {
          "ast_heads": [
            {
              "function [top (gen)]": 5
            },
            {
              "= [top (gen)]": 8
            },
            {
              "other [top (gen)]": 1
            },
            {
              "for [top (gen)]": 1
            },
            {
              "error [top (gen)]": 2
            },
            {
              "call [top (gen)]": 15
            }
          ]
        }
      },
      {
        "count": 28,
        "last_call": "parse_metablock(::Documenter.DocTests.DocTestContext, ::Documenter.Utilities.Markdown2.CodeBlock) at DocTests.jl:97",
        "auxillary": {
          "ast_heads": [
            {
              "function [top]": 5
            },
            {
              "call [top]": 1
            },
            {
              "other [top (gen)]": 6
            },
            {
              "variable [top (gen)]": 12
            },
            {
              "value [top (gen)]": 1
            },
            {
              "macrocall [top (gen)]": 1
            },
            {
              "= [top]": 3
            },
            {
              "module [top]": 1
            },
            {
              "useimport [top]": 4
            }
          ]
        }
      },
      {
        "count": 25,
        "last_call": "(::Documenter.Expanders.var\"#11#12\"{Markdown.Code,Documenter.Documents.Page,Documenter.Documents.Document,Module})() at Expanders.jl:496",
        "auxillary": {
          "ast_heads": [
            {
              "= [top (gen)]": 6
            },
            {
              "useimport [top (gen)]": 5
            },
            {
              "variable [top (gen)]": 5
            },
            {
              "call [top (gen)]": 9
            }
          ]
        }
      },
      {
        "count": 19,
        "last_call": "doctest(::Documenter.DocTests.DocTestContext, ::Documenter.Utilities.Markdown2.CodeBlock) at DocTests.jl:152",
        "auxillary": {
          "ast_heads": [
            {
              "function [top]": 5
            },
            {
              "other [top (gen)]": 2
            },
            {
              "value [top (gen)]": 5
            },
            {
              "macrocall [top (gen)]": 6
            },
            {
              "useimport [top]": 3
            }
          ]
        }
      },
      {
        "count": 9,
        "last_call": "eval(::Expr) at Expanders.jl:722",
        "auxillary": {
          "ast_heads": [
            {
              "call [top (gen)]": 9
            }
          ]
        }
      },
      {
        "count": 8,
        "last_call": "initdocmeta!(::Module) at DocMeta.jl:37",
        "auxillary": {
          "ast_heads": [
            {
              "const [top (gen)]": 8
            }
          ]
        }
      },
      {
        "count": 4,
        "last_call": "runner(::Type{Documenter.Expanders.AutoDocsBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:378",
        "auxillary": {
          "ast_heads": [
            {
              "-> [top (gen)]": 4
            }
          ]
        }
      },
      {
        "count": 4,
        "last_call": "top-level scope at dom.jl:11",
        "auxillary": {
          "ast_heads": [
            {
              "variable [top (gen)]": 4
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": "test_doctest_fix(::String) at tests.jl:21",
        "auxillary": {
          "ast_heads": [
            {
              "useimport [top (gen)]": 1
            }
          ]
        }
      },
      {
        "count": 1,
        "last_call": "test_doctest_fix(::String) at tests.jl:26",
        "auxillary": {
          "ast_heads": [
            {
              "useimport [top (gen)]": 1
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "ast_heads": [],
      "func_def_types": {
        "newFuncCount": 0,
        "bodylessFuncCount": 0,
        "funcRedefCount": 0,
        "miscCount": 0
      },
      "func_def_ast_forms": "[[{\"astHead\":\"struct\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},16],[{\"astHead\":\"error\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},10],[{\"astHead\":\"=\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},178],[{\"astHead\":\"include\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},20],[{\"astHead\":\"struct\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},28],[{\"astHead\":\"variable\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},32],[{\"astHead\":\"function\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},94],[{\"astHead\":\"let\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},24],[{\"astHead\":\"call\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},226],[{\"astHead\":\"variable\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},714],[{\"astHead\":\"nothing\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},42],[{\"astHead\":\"other\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},1352],[{\"astHead\":\"|>\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},4],[{\"astHead\":\"->\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},8],[{\"astHead\":\"for\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},8],[{\"astHead\":\"value\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},68],[{\"astHead\":\"module\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},10],[{\"astHead\":\"for\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},10],[{\"astHead\":\"function\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},1306],[{\"astHead\":\"useimport\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},46],[{\"astHead\":\"useimport\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},96],[{\"astHead\":\"curly\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},1258],[{\"astHead\":\"macrocall\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},86],[{\"astHead\":\"macrocall\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},48],[{\"astHead\":\"other\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},1832],[{\"astHead\":\"call\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},970],[{\"astHead\":\"const\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},16],[{\"astHead\":\"=\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},178]]"
    }
  },
  "invokelatest_info": {
    "call_count": 933,
    "stack_traces": [
      {
        "count": 280,
        "last_call": "runner(::Type{Documenter.Expanders.AutoDocsBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:413",
        "auxillary": {
          "function_names": [
            {
              "function_name": "#7",
              "count": 268
            },
            {
              "function_name": "#104",
              "count": 3
            },
            {
              "function_name": "#110",
              "count": 3
            },
            {
              "function_name": "#106",
              "count": 3
            },
            {
              "function_name": "#114",
              "count": 3
            }
          ]
        }
      },
      {
        "count": 275,
        "last_call": "result_to_string at DocTests.jl:322 [inlined]",
        "auxillary": {
          "function_names": [
            {
              "function_name": "show",
              "count": 275
            }
          ]
        }
      },
      {
        "count": 152,
        "last_call": "runner(::Type{Documenter.Expanders.ExampleBlocks}, ::Markdown.Code, ::Documenter.Documents.Page, ::Documenter.Documents.Document) at Expanders.jl:582",
        "auxillary": {
          "function_names": [
            {
              "function_name": "display_dict",
              "count": 152
            }
          ]
        }
      },
      {
        "count": 111,
        "last_call": "#mdconvert#110 at HTMLWriter.jl:1718 [inlined]",
        "auxillary": {
          "function_names": [
            {
              "function_name": "mdconvert",
              "count": 111
            }
          ]
        }
      },
      {
        "count": 77,
        "last_call": "#3 at MarkdownWriter.jl:149 [inlined]",
        "auxillary": {
          "function_names": [
            {
              "function_name": "render",
              "count": 77
            }
          ]
        }
      },
      {
        "count": 38,
        "last_call": "error_to_string(::Base.GenericIOBuffer{Array{UInt8,1}}, ::DivideError, ::Array{Any,1}) at DocTests.jl:335",
        "auxillary": {
          "function_names": [
            {
              "function_name": "showerror",
              "count": 38
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "function_names": [
        {
          "function_name": "show",
          "count": 275
        },
        {
          "function_name": "#7",
          "count": 268
        },
        {
          "function_name": "display_dict",
          "count": 152
        },
        {
          "function_name": "mdconvert",
          "count": 111
        },
        {
          "function_name": "render",
          "count": 77
        },
        {
          "function_name": "showerror",
          "count": 38
        },
        {
          "function_name": "#104",
          "count": 3
        },
        {
          "function_name": "#110",
          "count": 3
        },
        {
          "function_name": "#106",
          "count": 3
        },
        {
          "function_name": "#114",
          "count": 3
        }
      ]
    }
  }
}
