{
  "eval_info": {
    "call_count": 1740,
    "stack_traces": [
      {
        "count": 1073,
        "last_call": "(::Distributed.var\"#155#156\"{Module,Expr})() at task.jl:356",
        "auxillary": {
          "ast_heads": [
            {
              "call [top]": 420
            },
            {
              "include [top (gen)]": 1
            },
            {
              "module [top (gen)]": 113
            },
            {
              "= [top]": 420
            },
            {
              "call [top (gen)]": 539
            }
          ]
        }
      },
      {
        "count": 442,
        "last_call": "top-level scope at none:1",
        "auxillary": {
          "ast_heads": [
            {
              "call [fun]": 884
            }
          ]
        }
      },
      {
        "count": 221,
        "last_call": "#137 at remotecall.jl:354 [inlined]",
        "auxillary": {
          "ast_heads": [
            {
              "other [top (gen)]": 11
            },
            {
              "call [top (gen)]": 210
            }
          ]
        }
      },
      {
        "count": 4,
        "last_call": "initmeta(::Module) at Docs.jl:79",
        "auxillary": {
          "ast_heads": [
            {
              "const [top (gen)]": 4
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "ast_heads": [],
      "func_def_types": {
        "newFuncCount": 0,
        "bodylessFuncCount": 0,
        "funcRedefCount": 0,
        "miscCount": 0
      },
      "func_def_ast_forms": "[[{\"astHead\":\"include\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},2],[{\"astHead\":\"module\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},226],[{\"astHead\":\"call\",\"context\":{\"inFunDef\":false,\"inQuote\":true}},1768],[{\"astHead\":\"call\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},1498],[{\"astHead\":\"other\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},22],[{\"astHead\":\"call\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},840],[{\"astHead\":\"const\",\"context\":{\"inFunDef\":true,\"inQuote\":false}},8],[{\"astHead\":\"=\",\"context\":{\"inFunDef\":true,\"inQuote\":true}},840]]"
    }
  },
  "invokelatest_info": {
    "call_count": 562,
    "stack_traces": [
      {
        "count": 262,
        "last_call": "send_msg_(::Distributed.Worker, ::Distributed.MsgHeader, ::Distributed.JoinPGRPMsg, ::Bool) at messages.jl:185",
        "auxillary": {
          "function_names": [
            {
              "function_name": "serialize_msg",
              "count": 262
            }
          ]
        }
      },
      {
        "count": 145,
        "last_call": "(::Distributed.var\"#125#126\"{Distributed.ProcessGroup,Distributed.RRID,typeof(Distributed.def_rv_channel)})() at remotecall.jl:175",
        "auxillary": {
          "function_names": [
            {
              "function_name": "def_rv_channel",
              "count": 145
            }
          ]
        }
      },
      {
        "count": 140,
        "last_call": "message_handler_loop(::Sockets.TCPSocket, ::Sockets.TCPSocket, ::Bool) at process_messages.jl:185",
        "auxillary": {
          "function_names": [
            {
              "function_name": "deserialize_msg",
              "count": 140
            }
          ]
        }
      },
      {
        "count": 15,
        "last_call": "show_backtrace(::IOStream, ::Array{Union{Ptr{Nothing}, Base.InterpreterIP},1}) at errorshow.jl:655",
        "auxillary": {
          "function_names": [
            {
              "function_name": "identity",
              "count": 15
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "function_names": [
        {
          "function_name": "serialize_msg",
          "count": 262
        },
        {
          "function_name": "def_rv_channel",
          "count": 145
        },
        {
          "function_name": "deserialize_msg",
          "count": 140
        },
        {
          "function_name": "identity",
          "count": 15
        }
      ]
    }
  }
}
