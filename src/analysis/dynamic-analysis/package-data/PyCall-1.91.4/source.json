{
  "eval_info": {
    "call_count": 0,
    "stack_traces": [],
    "func_specific_data": {
      "ast_heads": [],
      "func_def_types": {
        "newFuncCount": 0,
        "bodylessFuncCount": 0,
        "funcRedefCount": 0,
        "miscCount": 0
      }
    }
  },
  "invokelatest_info": {
    "call_count": 14,
    "stack_traces": [
      {
        "count": 14,
        "last_call": "_pyjlwrap_call(::Function, ::Ptr{PyCall.PyObject_struct}, ::Ptr{PyCall.PyObject_struct}) at callback.jl:28",
        "auxillary": {
          "function_names": [
            {
              "function_name": "include_string",
              "count": 3
            },
            {
              "function_name": "PyCall.FuncWrapper{Tuple{Complex{Int64}},typeof(sin)}(sin, Dict{Symbol,Any}())",
              "count": 1
            },
            {
              "function_name": "PyCall.FuncWrapper{Tuple{Int64},PyCall.var\"#67#73\"{PyCall.var\"#67#68#74\"{typeof(factorial)}}}(PyCall.var\"#67#73\"{PyCall.var\"#67#68#74\"{typeof(factorial)}}(PyCall.var\"#67#68#74\"{typeof(factorial)}(factorial)), Dict{Symbol,Any}())",
              "count": 1
            },
            {
              "function_name": "PyCall.FuncWrapper{Tuple{Int64},PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(factorial),DataType}}}(PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(factorial),DataType}}(PyCall.var\"#69#70#76\"{typeof(factorial),DataType}(factorial, Float64)), Dict{Symbol,Any}())",
              "count": 1
            },
            {
              "function_name": "#53",
              "count": 1
            },
            {
              "function_name": "#52",
              "count": 1
            },
            {
              "function_name": "#78",
              "count": 1
            },
            {
              "function_name": "PyCall.FuncWrapper{Tuple{Vararg{Int64,N} where N},PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(max),DataType}}}(PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(max),DataType}}(PyCall.var\"#69#70#76\"{typeof(max),DataType}(max, Int64)), Dict{Symbol,Any}())",
              "count": 1
            },
            {
              "function_name": "TestConstruct",
              "count": 1
            },
            {
              "function_name": "testkw",
              "count": 1
            },
            {
              "function_name": "PyCall.FuncWrapper{Tuple{Int64},PyCall.var\"#65#71\"{PyCall.var\"#65#66#72\"{typeof(factorial)}}}(PyCall.var\"#65#71\"{PyCall.var\"#65#66#72\"{typeof(factorial)}}(PyCall.var\"#65#66#72\"{typeof(factorial)}(factorial)), Dict{Symbol,Any}())",
              "count": 1
            },
            {
              "function_name": "PyCall.FuncWrapper{Tuple{Int64},typeof(factorial)}(factorial, Dict{Symbol,Any}())",
              "count": 1
            }
          ]
        }
      }
    ],
    "func_specific_data": {
      "function_names": [
        {
          "function_name": "include_string",
          "count": 3
        },
        {
          "function_name": "PyCall.FuncWrapper{Tuple{Complex{Int64}},typeof(sin)}(sin, Dict{Symbol,Any}())",
          "count": 1
        },
        {
          "function_name": "PyCall.FuncWrapper{Tuple{Int64},PyCall.var\"#67#73\"{PyCall.var\"#67#68#74\"{typeof(factorial)}}}(PyCall.var\"#67#73\"{PyCall.var\"#67#68#74\"{typeof(factorial)}}(PyCall.var\"#67#68#74\"{typeof(factorial)}(factorial)), Dict{Symbol,Any}())",
          "count": 1
        },
        {
          "function_name": "PyCall.FuncWrapper{Tuple{Int64},PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(factorial),DataType}}}(PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(factorial),DataType}}(PyCall.var\"#69#70#76\"{typeof(factorial),DataType}(factorial, Float64)), Dict{Symbol,Any}())",
          "count": 1
        },
        {
          "function_name": "#53",
          "count": 1
        },
        {
          "function_name": "#52",
          "count": 1
        },
        {
          "function_name": "#78",
          "count": 1
        },
        {
          "function_name": "PyCall.FuncWrapper{Tuple{Vararg{Int64,N} where N},PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(max),DataType}}}(PyCall.var\"#69#75\"{PyCall.var\"#69#70#76\"{typeof(max),DataType}}(PyCall.var\"#69#70#76\"{typeof(max),DataType}(max, Int64)), Dict{Symbol,Any}())",
          "count": 1
        },
        {
          "function_name": "TestConstruct",
          "count": 1
        },
        {
          "function_name": "testkw",
          "count": 1
        },
        {
          "function_name": "PyCall.FuncWrapper{Tuple{Int64},PyCall.var\"#65#71\"{PyCall.var\"#65#66#72\"{typeof(factorial)}}}(PyCall.var\"#65#71\"{PyCall.var\"#65#66#72\"{typeof(factorial)}}(PyCall.var\"#65#66#72\"{typeof(factorial)}(factorial)), Dict{Symbol,Any}())",
          "count": 1
        },
        {
          "function_name": "PyCall.FuncWrapper{Tuple{Int64},typeof(factorial)}(factorial, Dict{Symbol,Any}())",
          "count": 1
        }
      ]
    }
  }
}
